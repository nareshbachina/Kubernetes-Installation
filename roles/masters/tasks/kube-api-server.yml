---
- name: Check if kube api server binary exists at the required location
  stat:
    path: "{{ kubernetes_binaries_directory }}/kube-apiserver"
  register: kube_api_server_binary_exists

- name: debug
  debug:
    var=kube_api_server_binary_exists

- name: Check if kube api server binary version matches with the required version
  shell: kube-apiserver --version | awk '{print $2}'
  register: kube_api_server_version_check
  when: kube_api_server_binary_exists.stat.exists == True

- name: debug
  debug:
    var=kube_api_server_version_check


- name: Download the kube api server binary file
  get_url:
    url: "{{ kube_api_server_download_url }}"
    dest: "{{ kubernetes_download_directory }}"
  when: kube_api_server_binary_exists.stat.exists == False

- name: Move the kube api server binary to PATH variable locations
  copy:
    src: "{{ kubernetes_download_directory }}/kube-apiserver"
    dest: "{{ kubernetes_binaries_directory }}"
    owner: root
    group: root
    mode: "a+x"
    remote_src: yes
  when: kube_api_server_binary_exists.stat.exists == False

- name: Downloading the Etcd Authority key and certificate files from S3
  aws_s3:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    bucket: "{{ s3_bucket_name }}"
    object: "/etcd/{{ item }}"
    dest: "{{ kubernetes_conf_directory }}/{{ item }}"
    mode: get
    overwrite: different
  with_items:
    - etcd-server.crt
    - etcd-server.key

- name: Generating the Encryption config file
  template:
    src: "encryption-config.yaml.j2"
    dest: "{{ kubernetes_conf_directory }}/encryption-config.yaml"
    owner: root
    group: root

- name: Creating the Private Key for the kube-api-server
  openssl_privatekey:
   path: "{{ kubernetes_conf_directory }}/kube-apiserver.key"
   type: "RSA"
   size: 2048

- name: Creating the Ceritificate Signing Request for the created Private Key
  openssl_csr:
    path: "{{ kubernetes_conf_directory }}/kube-apiserver.csr"
    privatekey_path: "{{ kubernetes_conf_directory }}/kube-apiserver.key"
    common_name: "kube-apiserver"
    subject_alt_name: "IP:10.96.0.1,IP:172.31.17.66,IP:172.31.10.163,IP:127.0.0.1,DNS:kubernetes,DNS:kubernetes.default,DNS:kubernetes.default.svc,DNS:kubernetes.default.svc.cluster.local"
  
- name: Generate an OpenSSL certificate signed with our own CA certificate
  openssl_certificate:
    path: "{{ kubernetes_conf_directory }}/kube-apiserver.crt"
    csr_path: "{{ kubernetes_conf_directory }}/kube-apiserver.csr"
    ownca_path: "{{ kubernetes_conf_directory }}/ca.crt"
    ownca_privatekey_path: "{{ kubernetes_conf_directory }}/ca.key"
    provider: ownca

- name: Creating the kube api server systemd service unit file
  template:
    src: "kube-apiserver.service.j2"
    dest: "/etc/systemd/system/kube-apiserver.service"
    owner: root
    group: root
  notify: 
    - systemd reload

- name: Enabling and start the kube api server service
  systemd:
    name: kube-apiserver
    state: started
    enabled: true